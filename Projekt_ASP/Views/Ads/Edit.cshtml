@model Projekt_ASP.Models.Ad
@using System.Linq

<div class="container mt-5 w-50 mt-3">

    <h2 class="text-center text-black">Edytuj Ogłoszenie</h2>


    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }


    <form asp-action="Edit" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="UserId" />

        <!-- Informacje o ogłoszeniu -->
        <div class="form-group pt-2">
            <label asp-for="Category" class="control-label text-black">Kategoria</label>
            <input asp-for="Category" class="form-control" readonly />
            <input type="hidden" asp-for="Category" />
            <span asp-validation-for="Category" class="text-danger"></span>
        </div>

        <div class="form-group pt-3">
            <label asp-for="Title" class="control-label text-black">Tytuł</label>
            <input asp-for="Title" class="form-control" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="form-group pt-3">
            <label asp-for="Description" class="control-label text-black">Opis</label>
            <textarea asp-for="Description" class="form-control"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group pt-3">
            <label asp-for="Price" class="control-label text-black">Cena</label>
            <input asp-for="Price" class="form-control" />
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="form-group pt-3">
            <label asp-for="Location" class="control-label text-black">Lokalizacja</label>
            <input asp-for="Location" class="form-control" />
            <span asp-validation-for="Location" class="text-danger"></span>
        </div>

        <div class="form-group pt-3">
            <label asp-for="PhoneNumber" class="control-label text-black">Numer telefonu</label>
            <input asp-for="PhoneNumber" class="form-control" />
            <span asp-validation-for="PhoneNumber" class="text-danger"></span>
        </div>

        <!-- Dynamiczne pola -->
        @if (!string.IsNullOrEmpty(Model.VehicleBrand) && Model.VehicleBrand != "Unknown")
        {
            <div class="form-group pt-3">
                <label asp-for="VehicleBrand" class="control-label text-black">Marka pojazdu</label>
                <input asp-for="VehicleBrand" class="form-control" />
                <span asp-validation-for="VehicleBrand" class="text-danger"></span>
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.VehicleModel) && Model.VehicleModel != "Unknown")
        {
            <div class="form-group pt-3">
                <label asp-for="VehicleModel" class="control-label text-black">Model pojazdu</label>
                <input asp-for="VehicleModel" class="form-control" />
                <span asp-validation-for="VehicleModel" class="text-danger"></span>
            </div>
        }

        @if (Model.VehicleYear != null)
        {
            <div class="form-group pt-3">
                <label asp-for="VehicleYear" class="control-label text-black">Rok produkcji pojazdu</label>
                <input asp-for="VehicleYear" class="form-control" />
                <span asp-validation-for="VehicleYear" class="text-danger"></span>
            </div>
        }

        @if (Model.VehicleMileage != null)
        {
            <div class="form-group pt-3">
                <label asp-for="VehicleMileage" class="control-label text-black">Przebieg pojazdu</label>
                <input asp-for="VehicleMileage" class="form-control" />
                <span asp-validation-for="VehicleMileage" class="text-danger"></span>
            </div>
        }

        <!-- Tutaj reszta sekcji dynamicznych z tłumaczeniami, np. Nieruchomości, Praca, Elektronika -->
        @if (!string.IsNullOrEmpty(Model.PropertyType) && Model.PropertyType != "Unknown")
        {
            <div class="form-group pt-3">
                <label asp-for="PropertyType" class="control-label text-black">Typ nieruchomości</label>
                <input asp-for="PropertyType" class="form-control" />
                <span asp-validation-for="PropertyType" class="text-danger"></span>
            </div>
        }

        @if (Model.PropertyArea != null)
        {
            <div class="form-group pt-3">
                <label asp-for="PropertyArea" class="control-label text-black">Powierzchnia nieruchomości</label>
                <input asp-for="PropertyArea" class="form-control" />
                <span asp-validation-for="PropertyArea" class="text-danger"></span>
            </div>
        }

        <!-- Przykład dla innych pól -->
        <div class="form-group pt-3">
            <label>Istniejące zdjęcia</label>
            <div class="row">
                @foreach (var image in Model.Images)
                {
                    var base64Image = Convert.ToBase64String(image.ImageData);
                    <div class="col-md-4 mb-3" id="image-container-@image.Id">
                        <!-- Wyświetlanie istniejącego zdjęcia -->
                        <img src="data:image/jpeg;base64,@base64Image" class="img-thumbnail" style="max-height: 150px; object-fit: cover;" />

                        <!-- Opcja usunięcia zdjęcia -->
                        <div class="form-check mt-2">
                            <input type="checkbox" name="deleteImageIds" value="@image.Id" class="form-check-input" id="deleteImage_@image.Id" />
                            <label class="form-check-label" for="deleteImage_@image.Id">Usuń</label>
                        </div>

                        <!-- Pole inputu do zamiany zdjęcia -->
                        <div class="form-group mt-2">
                            <label for="imageReplace_@image.Id" class="control-label">Zamień zdjęcie</label>
                            <input type="file" id="imageReplace_@image.Id" name="imageFiles_@image.Id" class="form-control" accept="image/*" />
                        </div>
                    </div>
                }
            </div>
        </div>


        <!-- Dodawanie nowych zdjęć -->
        <div class="form-group p-2">
            <label for="newImages" class="control-label">Dodaj zdjęcia</label>
            <div class="border border-primary rounded p-4 text-center bg-light" id="dropzone" ondrop="dropHandler(event);" ondragover="dragOverHandler(event);">
                <p class="mb-3">Przeciągnij i upuść zdjęcia tutaj lub kliknij, aby wybrać</p>
                <input type="file" id="newImages" name="newImages" class="form-control" multiple accept="image/*" />
            </div>
        </div>

        <script>
            function dropHandler(event) {
                event.preventDefault();
                const files = event.dataTransfer.files;
                const fileInput = document.getElementById('newImages');
                const dataTransfer = new DataTransfer();

                // Add existing files
                for (let i = 0; i < fileInput.files.length; i++) {
                    dataTransfer.items.add(fileInput.files[i]);
                }

                // Add new files
                for (let i = 0; i < files.length; i++) {
                    dataTransfer.items.add(files[i]);
                }

                fileInput.files = dataTransfer.files;
            }

            function dragOverHandler(event) {
                event.preventDefault();
            }
        </script>


        <!-- Spinner -->
        <div id="loadingSpinner" style="display: none;">
            <img src="spinner.gif" alt="Ładowanie..." />
        </div>

        <!-- Przycisk Zapisz i Anuluj -->
        <button type="submit" class="btn" style="background-color:#1d8968; color: white; margin-top: 20px;">Zapisz</button>
        <a asp-action="Index" class="btn btn-secondary mt-4" style="margin-top: 20px;">Anuluj</a>
    </form>

    <!-- Przycisk Usuń -->
    <form asp-action="DeleteConfirmed" method="post" style="display: inline-block;">
        <input type="hidden" name="id" value="@Model.Id" />
        <button type="submit" class="btn" style="background-color: #dc3545; color: white; margin-top: 20px;" onclick="return confirm('Czy chcesz na pewno usunąć ogłoszenie?');">Usuń ogłoszenie</button>
    </form>
</div>


}

@section Scripts {
<script>
           function deleteImage(imageId) {
            if (confirm("Czy na pewno chcesz usunąć ten obraz?")) {
                fetch(`/Ads/DeleteImage`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ imageId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Obraz został usunięty.");
                        document.getElementById(`image-container-${imageId}`).remove(); // Usunięcie obrazu z DOM
                    } else {
                        alert("Wystąpił błąd podczas usuwania obrazu.");
                    }
                })
                .catch(error => console.error("Error:", error));
            }
        }

</script>
<script>
        function deleteImage(imageId) {
        if (confirm("Czy na pewno chcesz usunąć to zdjęcie?")) {
            fetch(`/Ad/DeleteImage/${imageId}`, { method: 'POST' })
                .then(response => {
                    if (response.ok) {
                        alert("Zdjęcie zostało usunięte.");
                        location.reload(); // Odśwież stronę
                    } else {
                        alert("Błąd podczas usuwania zdjęcia.");
                    }
                })
                .catch(error => alert("Błąd sieci: " + error));
        }
    }

</script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.getElementById('imageUpload');
            const uploadButton = document.getElementById('uploadButton');
            const previewContainer = document.getElementById('imagePreview');

            // Funkcja do obsługi podglądu
            const showPreview = (files) => {
                previewContainer.innerHTML = ''; // Wyczyść wcześniejsze podglądy

                Array.from(files).forEach((file) => {
                    if (file.type.startsWith("image/")) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const imgElement = document.createElement("img");
                            imgElement.src = e.target.result;
                            imgElement.classList.add("img-thumbnail", "m-2");
                            imgElement.style.maxWidth = "100px";
                            imgElement.style.maxHeight = "100px";
                            previewContainer.appendChild(imgElement);
                        };
                        reader.readAsDataURL(file);
                    }
                });
            };

            // Obsługuje przeciąganie plików
            dropzone.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropzone.classList.add('bg-secondary');
            });

            dropzone.addEventListener('dragleave', () => {
                dropzone.classList.remove('bg-secondary');
            });

            dropzone.addEventListener('drop', (e) => {
                e.preventDefault();
                dropzone.classList.remove('bg-secondary');
                const files = e.dataTransfer.files;
                showPreview(files);
            });

            // Obsługuje wybór plików przez przycisk
            uploadButton.addEventListener('click', () => {
                fileInput.click();
            });

            // Obsługuje wybór plików przez input
            fileInput.addEventListener('change', () => {
                const files = fileInput.files;
                showPreview(files);
            });
        });
    </script>
}

<style>
    /* Dodatkowe niestandardowe style */
    .container {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .form-group label {
        color: #000;
    }

    .form-control {
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .btn {
        font-size: 1rem;
        border-radius: 5px;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn:hover {
        opacity: 0.8;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: #fff;
    }
</style>

</div>


